#!/bin/sh

# IOS - projekt1, wedi (text editor wrapper)
# Author: Juraj Lahvicka (xlahvi00)
POSIXLY_CORRECT=yes

#--------------Variables-------------
DATE=`date '+%Y-%m-%d %H:%M:%S'`
NUMBER_OF_EDITIONS=1
#------------------------------------

SELECTED_EDITOR=${EDITOR:-${VISUAL:-vi}}

#check and create path specified by WEDI_RC
WEDIRCTest()
{
	if [ -z "$WEDI_RC" ]; then
		echo "Error, WEDI_RC not set!" >&2
		exit 1
	else	
		if ! [ -e "$WEDI_RC" ]; then
			mkdir -p "$(dirname "$WEDI_RC")" 2>/dev/null
	 		if [ $? -eq 0 ]; then
				touch "$WEDI_RC"
				echo $WEDI_RC " Created succesfully." >&1
			else
				echo "Error: Cannot create directory or file! Please check permissions. 
Path: $WEDI_RC" >&2
				exit 1
			fi
		fi
	fi
}

checkIfEverEdited()
{
	deleteUnwantedLogs
	case $(grep -c "$LAST_ARGUMENT/[^/]*;" $WEDI_RC -o) in
		0) echo "No file has ever been edited in this folder." >&2
			 exit 1;;
	esac
}

checkFileName()
{
	if [ "$(echo $LAST_ARGUMENT | grep -c "[;]")" -ne "0" ]; then
		echo "Error: file name or path contains ';'. Use file names and paths without ';'!
Path: $LAST_ARGUMENT" >&2
		exit 1
	fi
}

checkFilePermissions()
{
	if [ ! -w "$WEDI_RC" ] || [ ! -r "$WEDI_RC" ]; then
		echo "WEDI_RC file not writable or readable. Please check permissions. 
Path: $WEDI_RC" >&2
		exit 1
	fi
}
 
checkRecordSet()
{
	checkFileName
	checkFilePermissions
		case $(grep -c "$LAST_ARGUMENT" $WEDI_RC -o) in
      0) echo "$LAST_ARGUMENT;$NUMBER_OF_EDITIONS;$DATE"  >> $WEDI_RC
         exit 0;;
		  1) NUMBER_OF_EDITIONS=$(grep $LAST_ARGUMENT $WEDI_RC | cut -d';' -f2)
				 NUMBER_OF_EDITIONS=$(echo "$NUMBER_OF_EDITIONS+1" | bc)
				 sed -i.tmp 's|'"$LAST_ARGUMENT"';.*|'"$LAST_ARGUMENT;$NUMBER_OF_EDITIONS;$DATE"'|' $WEDI_RC;;
    esac
} 

chooseLastEdited()
{
	checkIfEverEdited
	SORTED=$(grep "$LAST_ARGUMENT/[^/]*;" $WEDI_RC | cut -d';' -f3 | sort | tail -1)
	LAST_EDITED_FILE=$(grep "$LAST_ARGUMENT.*;.*;$SORTED" $WEDI_RC | cut -d';' -f1)
	checkFileName
	$SELECTED_EDITOR $LAST_EDITED_FILE
	if [ "$?" -ne "0" ]; then
		exit $?
	fi
	LAST_ARGUMENT=$LAST_EDITED_FILE
}

chooseMostEdited()
{
	checkIfEverEdited
	SORTED=$(grep "$LAST_ARGUMENT/[^/]*;" $WEDI_RC | cut -d';' -f2 | sort -n | tail -1)
	MOST_EDITED_FILE=$(grep "$LAST_ARGUMENT.*;$SORTED;.*" $WEDI_RC | cut -d';' -f1 | tail -1)
	checkFileName
	$SELECTED_EDITOR $MOST_EDITED_FILE
	if [ "$?" -ne "0" ]; then
		exit $?
	fi
	LAST_ARGUMENT=$MOST_EDITED_FILE
}

showAllEditedFiles()
{
	checkIfEverEdited
	grep "$LAST_ARGUMENT/[^/]*;" $WEDI_RC | cut -d';' -f1 | sort | rev | cut -d '/' -f1 | rev
}

dateCheck()
{
	if [ $(echo $1 | grep "^[0-9]\{4\}-[0-1][0-9]-[0-3][0-9]$") ]; then
		INPUT_DATE=$1
	else
		echo "Date Error: Accepted date format: YYYY-MM-DD" >&2
		exit 1
	fi
}

filesBeforeDate()
{
	checkIfEverEdited
	for i in $(grep "$LAST_ARGUMENT/[^/]*;.*" $WEDI_RC); do		
		if [ "$(echo $i | grep -c ":")" -eq 0 ]; then	#because it separates date and time, so time is in next i 			
			if [ "$(echo $i | cut -d';' -f3 | cut -d' ' -f1 | tr -d "-")" -lt "$(echo $INPUT_DATE | tr -d "-")" ]; then
				echo $i | cut -d';' -f1 | sort | rev | cut -d '/' -f1 | rev
			fi
		fi
	done	
}

filesAfterDate()
{
	checkIfEverEdited
	for i in $(grep "$LAST_ARGUMENT/[^/]*;.*" $WEDI_RC); do
		DATE_FROM_LOG=$(echo $i | cut -d';' -f3 | cut -d' ' -f1 | tr -d "-")
		if [ "$(echo $i | grep -c ":")" -eq 0 ]; then #because it separates date and time, so time is in next i				
			if [ "$DATE_FROM_LOG" -gt "$(echo $INPUT_DATE | tr -d "-")" ] || [ "$DATE_FROM_LOG" -eq "$( echo $INPUT_DATE | tr -d "-")" ]; then
				echo $i | cut -d';' -f1 | sort | rev | cut -d '/' -f1 | rev
			fi
		fi
	done	
}

deleteUnwantedLogs() 
{
  while read record; do
		if [ ! -f "$(grep "$record" $WEDI_RC | cut -d';' -f1)" ]; then
			sed -i.tmp 's|'"$record"'|'"$record;del"'|' "$WEDI_RC"
    fi
  done <$WEDI_RC
  sed -i.tmp '/.*;.*;.*;del/d' $WEDI_RC
}

#checks if realpath is functional
realpathTest()
{
	if [ ! -x "$(command -v realpath)" ]; then
    echo "Error: realpath utility not installed." >&2
    exit 1
	fi
}

#main
	WEDIRCTest
	realpathTest
#mode selector
	if [ "$#" -eq "0" ]; then #no arguments
		LAST_ARGUMENT=$(realpath ./)
		chooseLastEdited
		checkRecordSet
	elif [ "$#" -gt "0" ]; then
		#Get last argument
		for LAST_ARGUMENT; do true; done

		#is file
		if [ -f "$LAST_ARGUMENT" ]; then	
			if [ "$#" -eq "1" ]; then
				LAST_ARGUMENT=$(realpath $LAST_ARGUMENT)
				checkFileName
				$SELECTED_EDITOR $LAST_ARGUMENT
				if [ "$?" -ne "0" ]; then
					exit $?
				fi
				checkRecordSet
			else
				echo "Too many arguments for file" >&2
				exit 1
			fi
		#is directory
		elif [ -d "$LAST_ARGUMENT" ]; then
			LAST_ARGUMENT=$(realpath $LAST_ARGUMENT)
			if [ "$#" -eq "1" ]; then
				chooseLastEdited
				checkRecordSet
			elif [ "$#" -eq "2" ] && [ "$1" = "-m" ]; then
				chooseMostEdited
				checkRecordSet
			elif [ "$#" -eq "2" ] && [ "$1" = "-l" ]; then
		 		showAllEditedFiles
			elif [ "$#" -eq "3" ] && [ "$1" = "-b" ]; then
				dateCheck $2
				filesBeforeDate
			elif [ "$#" -eq "3" ] && [ "$1" = "-a" ]; then
				dateCheck $2
				filesAfterDate
			else
				echo "Too many arguments or wrong order of arguments." >&2
				exit 1
			fi
		#is current directory (directory not specified)
		elif [ ! -d "$LAST_ARGUMENT" ]; then
			LAST_ARGUMENT=$(realpath './')
			if [ "$#" -eq "0" ]; then
				chooseLastEdited
				checkRecordSet
			elif [ "$#" -eq "1" ] && [ "$1" = "-m" ]; then
				chooseMostEdited
				checkRecordSet
			elif [ "$#" -eq "1" ] && [ "$1" = "-l" ]; then
		 		showAllEditedFiles
			elif [ "$#" -eq "2" ] && [ "$1" = "-b" ]; then
				dateCheck $2
				filesBeforeDate
			elif [ "$#" -eq "2" ] && [ "$1" = "-a" ]; then
				dateCheck $2
				filesAfterDate
			else
				echo "File/Path not found or wrong arguments (too many or wrong order)." >&2
				exit 1
			fi
		else
			echo "Uknown input." >&2	
			exit 1
		fi	
	else
		echo "Unexpected Error." >&2
		exit 1
	fi
